(function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId]){return installedModules[moduleId].exports}var module=installedModules[moduleId]={i:moduleId,l:false,exports:{}};modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.l=true;return module.exports}__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.i=function(value){return value};__webpack_require__.d=function(exports,name,getter){if(!__webpack_require__.o(exports,name)){Object.defineProperty(exports,name,{configurable:false,enumerable:true,get:getter})}};__webpack_require__.n=function(module){var getter=module&&module.__esModule?function getDefault(){return module["default"]}:function getModuleExports(){return module};__webpack_require__.d(getter,"a",getter);return getter};__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)};__webpack_require__.p="";return __webpack_require__(__webpack_require__.s=0)})([function(module,exports){if(typeof AFRAME==="undefined"){throw new Error("Component attempted to register before AFRAME was available.")}AFRAME.registerComponent("custom-cubemap",{multiple:true,schema:{folder:{type:"string",default:""},edgeLength:{type:"int",default:500},ext:{type:"string",default:"png"},transparent:{type:"boolean",default:false},background:{type:"boolean",default:false},formatRGBA:{type:"boolean",default:false},stereo:{type:"string",default:"both"},eye:{type:"string",default:"_L_"},vif:{type:"string",default:""}},init(){this.onEnterVr=this.onEnterVr.bind(this);this.onExitVr=this.onExitVr.bind(this);this.setStereoLayer=this.setStereoLayer.bind(this)},update(){if(this.data.folder!==""){cubemap=this.loadCubemapTexture(this.data.folder);return this.createSkyBox(cubemap)}},play(){this.addEventListeners()},remove(){this.removeEventListeners();this.el.removeObject3D("cubemap")},onEnterVr(){this.setStereoLayer("inVrMode")},onExitVr(){this.setStereoLayer("outVrMode")},addEventListeners(){const canvasEl=document.querySelector("a-scene");if(canvasEl){canvasEl.addEventListener("enter-vr",this.onEnterVr,false);canvasEl.addEventListener("exit-vr",this.onExitVr,false)}},removeEventListeners(){const canvasEl=document.querySelector("a-scene");if(canvasEl){canvasEl.removeEventListener("enter-vr",this.onEnterVr);canvasEl.removeEventListener("exit-vr",this.onExitVr)}},setStereoLayer(mode){const data=this.data;const obj3D=this.el.object3D.children[0];if(data.stereo==="both"||data.stereo==="left"){obj3D.layers.set(0)}else if(data.stereo==="right"){obj3D.layers.set(2)}if(mode==="inVrMode"&&data.stereo==="left"){obj3D.layers.set(1)}},loadCubemapTexture(folderPath){const loader=new THREE.CubeTextureLoader;const urls=["1.png","3.png","4.png","5.png","0.png","2.png"];const path=folderPath||"";let formattedUrls=[];if(this.data.background){return loader.setPath(path+"/").load(urls)}const eye=this.data.eye;formattedUrls=urls.map(url=>`${folderPath}${eye}${url}`);return loader.setPath(path+"/").load(formattedUrls)},createSkyBox(cubemap){const shader=THREE.ShaderLib.cube;const skyBoxShader=new THREE.ShaderMaterial({fragmentShader:shader.fragmentShader,vertexShader:shader.vertexShader,transparent:this.data.transparent,uniforms:shader.uniforms,side:THREE.BackSide,depthWrite:false});const skyBoxMaterial=skyBoxShader.clone();skyBoxMaterial.uniforms.tCube.value=cubemap;const edgeLength=this.data.edgeLength;const skyBoxGeometry=new THREE.CubeGeometry(edgeLength,edgeLength,edgeLength);this.el.setObject3D("cubemap",new THREE.Mesh(skyBoxGeometry,skyBoxMaterial))}})}]);
